id,path,author_id,title,content,read
1,1,1,Solution: Running Sum of 1d Array,"This is part of a series of Leetcode solution explanations (index). If you liked this solution or found it useful, please like this post and/or upvote my solution post on Leetcode's forums.

(Jump to: Solution Idea || Code: JavaScript | Python | Java | C++)

Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

(Jump to: Problem Description || Code: JavaScript | Python | Java | C++)

While this is not a terribly challenging problem, it's a good introduction to the concept of a prefix sum array. Prefix sum arrays have many uses in more complex algorithms and can sometimes help reduce the time complexity of a advanced solution by an order of magnitude.

In a prefix sum array, we will create a duplicate array which contains the running sum of the elements 0 to i of our original array (nums) for each index i of our prefix sum array (ans). (Note: We can lower the space complexity by using an in-place approach with nums directly and mutating it into its own prefix sum array, if there is no compelling reason to avoid modifying a function argument.)

Since we'll need to build on a previous running total, we should start our iteration at i = 1 and copy over the first element from nums to ans. Then we just iterate through nums and add each element (nums[i]) to the previous running total (ans[i-1]) to create the new running total (ans[i]).

When we're done, we can return ans.

(Jump to: Problem Description || Solution Idea)

(Jump to: Problem Description || Solution Idea)

(Jump to: Problem Description || Solution Idea)

(Jump to: Problem Description || Solution Idea)",false
